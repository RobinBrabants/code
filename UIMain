import sys
from PyQt5 import QtWidgets
import design
from Lib.ParticleMove import ParticleMove
from Lib.RepresentData import *
import numpy as np
import matplotlib.pyplot as plt


class ExampleApp(QtWidgets.QMainWindow, design.Ui_MainWindow):
    def __init__(self):
        # Explaining super is out of the scope of this article
        # So please google it if you're not familar with it
        # Simple reason why we use it here is that it allows us to
        # access variables, methods etc in the design.py file
        super(self.__class__, self).__init__()
        self.setupUi(self)  # This is defined in design.py file automatically
                            # It sets up layout and widgets that are defined
        self.pushButton.clicked.connect(self.Main)

    def Main(self):
        d = ReadXml()

        B_list = SetupElements(d)

        B = ResultingField(B_list)

        E_list = SetupElements2(d)

        E_listWOS = SetupElementsWOS(d)

        E = ResultingField(E_list)

        EWOS = ResultingString(E_listWOS)


        #WalkOnSpheres(EWOS)


        data = ParticleMove(B, E, EWOS, d)

        if d["WriteDataToFile"] == "yes":
            WriteFile(B, data, d)

        if d["MagneticFieldPlot"] == "yes":
            Plotfield(B, d)

        if d["ElectricFieldPlot"] == "yes":
            Plotfield(E, d)

        if d["TrajectoryPlot"] == "yes":
            PlotTrajectory(data)


def main():
    app = QtWidgets.QApplication(sys.argv)  # A new instance of QApplication
    form = ExampleApp()                 # We set the form to be our ExampleApp (design)
    form.show()                         # Show the form
    app.exec_()                         # and execute the app


if __name__ == '__main__':              # if we're running file directly and not importing it
    main()                              # run the main function